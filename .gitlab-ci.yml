.env:
  variables:
    GHC_VERSION: "9.12.2"
    TAG_VER_MAJ_MIN: "true"
    TAG_VER_MAJ: "true"
    TAG_LATEST: "true"
    HLS_VERSION: "2.10.0.0"
    TAG_HLS_LATEST: "true"
    BUILD_HLS: "false"

.before-script-build: &before-script-build
  - |
    if [[ -n "$CI_BUILD_PLATFORMS" ]]; then
      export OS_ARCH=$(echo $CI_BUILD_PLATFORMS \
        | tr ',' '\n' \
        | tr '[:space:]' '\n' \
        | sed '/^$/d' \
        | sed 's|\/||2' \
        | sed 's|\/|-|' \
        | paste -d ' ' -s -)
    fi
  - |
    export CI_APP_REPO=${CI_APP_REPO:-$CI_REGISTRY_IMAGE}
    export CI_APP_TAG=${CI_APP_TAG:-$GHC_VERSION}

    if [[ "$TAG_VER_MAJ_MIN" == "true" ]]; then
      export VERSION_MAJ_MIN=${GHC_VERSION%.*}
    fi

    if [[ "$TAG_VER_MAJ" == "true" ]]; then
      export VERSION_MAJ=${GHC_VERSION%.*.*}
    fi
  - |
    echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER \
    --password-stdin $CI_REGISTRY

    if [[ -n "$DOCKER_HUB_REPO" ]]; then
      echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER \
        --password-stdin docker.io
      export CI_APP_REPO="$CI_APP_REPO $DOCKER_HUB_REPO"
    fi

    if [[ -n "$QUAY_REPO" ]]; then
      echo $QUAY_PASSWORD | docker login -u $QUAY_USER \
        --password-stdin quay.io
      export CI_APP_REPO="$CI_APP_REPO $QUAY_REPO"
    fi

.build:
  image: quay.io/bedata/docker:dind
  extends: .env
  services:
    - name: quay.io/bedata/docker:dind
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    BUILDX_NO_DEFAULT_ATTESTATIONS: "true"
  before_script:
    - *before-script-build
  retry: 2

stages:
  - build1
  - build2
  - test
  - deploy

build-image:
  extends: .build
  stage: build1
  tags:
    - arch:${ARCH}
    - os:linux
  script:
    - |
      for i in $CI_APP_REPO; do
        docker build \
          --target test \
          --build-arg NATIVE_BIGNUM \
          -t $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-${ARCH//\/} \
          -f dockerfiles/$GHC_VERSION.Dockerfile .

        docker build \
          --build-arg NATIVE_BIGNUM \
          -t $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-${ARCH//\/} \
          -f dockerfiles/$GHC_VERSION.Dockerfile .

        if [[ "$TAG_LATEST" == "true" ]]; then
          docker tag $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-${ARCH//\/} \
            $i:latest${NATIVE_BIGNUM:+-int-native}-linux-${ARCH//\/}
        fi
      done
    - |
      for i in $CI_APP_REPO; do
        docker push $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-${ARCH//\/}

        if [[ "$TAG_LATEST" == "true" ]]; then
          docker push $i:latest${NATIVE_BIGNUM:+-int-native}-linux-${ARCH//\/}
        fi
      done
  parallel:
    matrix:
      - ARCH: ["amd64", "arm64/v8"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "freeze-version"
      changes:
        - dockerfiles/$GHC_VERSION.Dockerfile

build-manifest:
  extends: .build
  stage: build1
  needs: ["build-image"]
  script:
    - |
      for i in $CI_APP_REPO; do
      unset CI_MANIFEST_LIST
        for j in $OS_ARCH; do
          export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-$j"
        done

        docker manifest create $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native} $CI_MANIFEST_LIST
        if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
          docker manifest annotate --variant v8 $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native} \
            $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-arm64v8
        fi
        docker manifest push $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}

        if [[ "$TAG_VER_MAJ_MIN" == "true" ]]; then
          docker manifest create $i:$VERSION_MAJ_MIN $CI_MANIFEST_LIST
          if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
            docker manifest annotate --variant v8 $i:$VERSION_MAJ_MIN \
              $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-arm64v8
          fi
          docker manifest push $i:$VERSION_MAJ_MIN
        fi

        if [[ "$TAG_VER_MAJ" == "true" ]]; then
          docker manifest create $i:$VERSION_MAJ $CI_MANIFEST_LIST
          if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
            docker manifest annotate --variant v8 $i:$VERSION_MAJ \
              $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-arm64v8
          fi
          docker manifest push $i:$VERSION_MAJ
        fi

        if [[ "$TAG_LATEST" == "true" ]]; then
          docker manifest create $i:latest${NATIVE_BIGNUM:+-int-native} $CI_MANIFEST_LIST
          if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
            docker manifest annotate --variant v8 $i:latest${NATIVE_BIGNUM:+-int-native} \
              $i:$CI_APP_TAG${NATIVE_BIGNUM:+-int-native}-linux-arm64v8
          fi
          docker manifest push $i:latest${NATIVE_BIGNUM:+-int-native}
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "freeze-version"
      changes:
        - dockerfiles/$GHC_VERSION.Dockerfile

build-image:int-native:
  extends: build-image
  stage: build2
  variables:
    NATIVE_BIGNUM: 1

build-manifest:int-native:
  extends: build-manifest
  stage: build2
  needs: ["build-image:int-native"]
  variables:
    NATIVE_BIGNUM: 1

trigger-hls-build:
  image: quay.io/curl/curl:latest
  extends: .env
  stage: .post
  needs: ["build-manifest"]
  script:
    >
    curl
    -X POST
    --fail
    -F token=$HLSSI_TRIGGER_TOKEN
    -F ref=main
    -F "variables[GHC_VERSION]=$GHC_VERSION"
    -F "variables[HLS_VERSION]=$HLS_VERSION"
    -F "variables[TAG_VER_MAJ_MIN]=$TAG_VER_MAJ_MIN"
    -F "variables[TAG_VER_MAJ]=$TAG_VER_MAJ"
    -F "variables[TAG_LATEST]=$TAG_LATEST"
    -F "variables[TAG_HLS_LATEST]=$TAG_HLS_LATEST"
    $HLSSI_TRIGGER_URL
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "freeze-version") && $BUILD_HLS == "true"
      changes:
        - dockerfiles/$GHC_VERSION.Dockerfile
